{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ECS Python-Package Repository About Here you can find information and documentation on the available python packages. Available Packages While our current list of packages is small we hope to build a larger amount of internal tools and capabilities. kafkautil-ecs kafkautil-ecs 1.0.0 is available in the pypi.org repository.","title":"Home"},{"location":"#welcome-to-the-ecs-python-package-repository","text":"","title":"Welcome to the ECS Python-Package Repository"},{"location":"#about","text":"Here you can find information and documentation on the available python packages.","title":"About"},{"location":"#available-packages","text":"While our current list of packages is small we hope to build a larger amount of internal tools and capabilities.","title":"Available Packages"},{"location":"#kafkautil-ecs","text":"kafkautil-ecs 1.0.0 is available in the pypi.org repository.","title":"kafkautil-ecs"},{"location":"LICENSE/","text":"MIT License kafkautil-ecs The MIT License (MIT) Copyright \u00a9 2022 Ryan Gilmore Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"LICENSE/#mit-license-kafkautil-ecs","text":"The MIT License (MIT) Copyright \u00a9 2022 Ryan Gilmore Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License kafkautil-ecs"},{"location":"guide-kafkautil/","text":"kafkautil-ecs About This is a command line (CLI) tool built in python for simple testing of kafka connections. This tool is used in command line interface, with three different commands. Author This package was authored by Ryan Gilmore, Data Scientist at ECS Federal Installation This package is available python's Pypi repository, therefore it can be installed using pip. There is only one version currently available v. 1.0.0. pip install kafkautil-ecs The package can be found at https://pypi.org/project/kafkautil-ecs/ Requirements Current requirements are: python 3 installed python's click package pythons's kafka-python package click and kafka-python should be installed automatically with the kafkautil-ecs package. Entrypoint Once installed the entrypoint for the cli tool is kafkautil . Therefore you can reach the utility by opening your terminal and typing kafkautil Once installed try typing kafkautil --help Commands The package comes with three commands: kafkautil test-connection kafkautil read-data kafkautil send-data Examples Below are examples for each command kafkautil test-connection Runing kafkautil test-connection --help will display the following: Usage: kafkautil test-connection [OPTIONS] BOOTSTRAP_SERVER BOOTSTRAP_SERVER: Server address for kafka topic Options: --help Show this message and exit. kafkautil test-connection takes one argument BOOTSTRAP_SERVER . BOOTSTRAP_SERVER is the location of the kafka instance. Example: kafkautil test-connection ipaddress:9092 It can take in a list, as a kafka cluster may have multiple ip addresses: kafkautil test-connection ipaddress:9092,ipaddress:9093 kafkautil read-data Runing kafkautil read-data --help will display the following: Usage: kafkautil read-data [OPTIONS] BOOTSTRAP_SERVER TOPIC BOOTSTRAP_SERVER: Server address for kafka topic TOPIC: Kafka topic Name Options: --offset TEXT Offset can be earliest or latest --help Show this message and exit. kafkautil read-data takes two arguments and one option argument. BOOTSTRAP_SERVER and TOPIC are required arguments. --offset is an optional argument, although it defaults to \"earliest\". --offset can be one of two values: \"earliest\" or \"latest\". If set to \"earliest\" it will grab all messages currently in the kafka topic. If set to \"latest\" the program will stay open waiting for the latest message to come through. Once the message comes through the program will end. If set to latest it will not show any existing messages on the topic. Example: kafkautil read-data xxx.xxx.xx:9092 myTopic This defaults to --offset earliest Example with --offset latest kafkautil read-data xxx.xxx.xx:9092 myTopic --offset latest","title":"Guide"},{"location":"guide-kafkautil/#kafkautil-ecs","text":"","title":"kafkautil-ecs"},{"location":"guide-kafkautil/#about","text":"This is a command line (CLI) tool built in python for simple testing of kafka connections. This tool is used in command line interface, with three different commands.","title":"About"},{"location":"guide-kafkautil/#author","text":"This package was authored by Ryan Gilmore, Data Scientist at ECS Federal","title":"Author"},{"location":"guide-kafkautil/#installation","text":"This package is available python's Pypi repository, therefore it can be installed using pip. There is only one version currently available v. 1.0.0. pip install kafkautil-ecs The package can be found at https://pypi.org/project/kafkautil-ecs/","title":"Installation"},{"location":"guide-kafkautil/#requirements","text":"Current requirements are: python 3 installed python's click package pythons's kafka-python package click and kafka-python should be installed automatically with the kafkautil-ecs package.","title":"Requirements"},{"location":"guide-kafkautil/#entrypoint","text":"Once installed the entrypoint for the cli tool is kafkautil . Therefore you can reach the utility by opening your terminal and typing kafkautil Once installed try typing kafkautil --help","title":"Entrypoint"},{"location":"guide-kafkautil/#commands","text":"The package comes with three commands: kafkautil test-connection kafkautil read-data kafkautil send-data","title":"Commands"},{"location":"guide-kafkautil/#examples","text":"Below are examples for each command","title":"Examples"},{"location":"guide-kafkautil/#kafkautil-test-connection","text":"Runing kafkautil test-connection --help will display the following: Usage: kafkautil test-connection [OPTIONS] BOOTSTRAP_SERVER BOOTSTRAP_SERVER: Server address for kafka topic Options: --help Show this message and exit. kafkautil test-connection takes one argument BOOTSTRAP_SERVER . BOOTSTRAP_SERVER is the location of the kafka instance. Example: kafkautil test-connection ipaddress:9092 It can take in a list, as a kafka cluster may have multiple ip addresses: kafkautil test-connection ipaddress:9092,ipaddress:9093","title":"kafkautil test-connection"},{"location":"guide-kafkautil/#kafkautil-read-data","text":"Runing kafkautil read-data --help will display the following: Usage: kafkautil read-data [OPTIONS] BOOTSTRAP_SERVER TOPIC BOOTSTRAP_SERVER: Server address for kafka topic TOPIC: Kafka topic Name Options: --offset TEXT Offset can be earliest or latest --help Show this message and exit. kafkautil read-data takes two arguments and one option argument. BOOTSTRAP_SERVER and TOPIC are required arguments. --offset is an optional argument, although it defaults to \"earliest\". --offset can be one of two values: \"earliest\" or \"latest\". If set to \"earliest\" it will grab all messages currently in the kafka topic. If set to \"latest\" the program will stay open waiting for the latest message to come through. Once the message comes through the program will end. If set to latest it will not show any existing messages on the topic. Example: kafkautil read-data xxx.xxx.xx:9092 myTopic This defaults to --offset earliest Example with --offset latest kafkautil read-data xxx.xxx.xx:9092 myTopic --offset latest","title":"kafkautil read-data"},{"location":"kafkautil-code/","text":"kafkautil-ecs code import click from kafka import KafkaConsumer,KafkaAdminClient,KafkaProducer @click.group() def cli(): pass @cli.command() @click.argument('bootstrap_server') def test_connection(bootstrap_server): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic \"\"\" click.echo(f\"\\nTesting Connectivity: {bootstrap_server}\\n\") click.echo(\"--- Kafka Admin Information ---\\n\") admin_client = KafkaAdminClient(bootstrap_servers=[bootstrap_server]) click.echo(\"Current Kafka Topics List:\\n\") click.echo(f\"{admin_client.list_topics()}\\n\") click.echo(\"Kafka Topics Description:\\n\") click.echo(f\"{admin_client.describe_topics()}\\n\") @cli.command() @click.argument('bootstrap_server') @click.argument('topic') @click.option('--offset',default='earliest',help='Offset can be earliest or latest') def read_data(bootstrap_server,topic,offset): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic\\n TOPIC: Kafka topic Name \"\"\" consumer = KafkaConsumer(topic,auto_offset_reset=offset, bootstrap_servers=[bootstrap_server ],api_version=(0, 10, 0)) msg_pack = consumer.poll(timeout_ms=100000) for tp, messages in msg_pack.items(): for message in messages: incomingKafkaMessage = message.value.decode('utf-8') click.echo(incomingKafkaMessage) @cli.command() @click.argument('bootstrap_server') @click.argument('topic') @click.option('--message',default='test message',help='Test message to send') def send_data(bootstrap_server,topic,message): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic\\n TOPIC: Kafka topic Name \"\"\" producer = KafkaProducer(bootstrap_servers=[bootstrap_server]) producer.send(topic, message.encode()) producer.flush() click.echo(f\"Message Sent to {bootstrap_server} @ topic {topic} with message {message}\") if __name__ == '__main__': cli()","title":"Code"},{"location":"kafkautil-code/#kafkautil-ecs-code","text":"import click from kafka import KafkaConsumer,KafkaAdminClient,KafkaProducer @click.group() def cli(): pass @cli.command() @click.argument('bootstrap_server') def test_connection(bootstrap_server): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic \"\"\" click.echo(f\"\\nTesting Connectivity: {bootstrap_server}\\n\") click.echo(\"--- Kafka Admin Information ---\\n\") admin_client = KafkaAdminClient(bootstrap_servers=[bootstrap_server]) click.echo(\"Current Kafka Topics List:\\n\") click.echo(f\"{admin_client.list_topics()}\\n\") click.echo(\"Kafka Topics Description:\\n\") click.echo(f\"{admin_client.describe_topics()}\\n\") @cli.command() @click.argument('bootstrap_server') @click.argument('topic') @click.option('--offset',default='earliest',help='Offset can be earliest or latest') def read_data(bootstrap_server,topic,offset): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic\\n TOPIC: Kafka topic Name \"\"\" consumer = KafkaConsumer(topic,auto_offset_reset=offset, bootstrap_servers=[bootstrap_server ],api_version=(0, 10, 0)) msg_pack = consumer.poll(timeout_ms=100000) for tp, messages in msg_pack.items(): for message in messages: incomingKafkaMessage = message.value.decode('utf-8') click.echo(incomingKafkaMessage) @cli.command() @click.argument('bootstrap_server') @click.argument('topic') @click.option('--message',default='test message',help='Test message to send') def send_data(bootstrap_server,topic,message): \"\"\" BOOTSTRAP_SERVER: Server address for kafka topic\\n TOPIC: Kafka topic Name \"\"\" producer = KafkaProducer(bootstrap_servers=[bootstrap_server]) producer.send(topic, message.encode()) producer.flush() click.echo(f\"Message Sent to {bootstrap_server} @ topic {topic} with message {message}\") if __name__ == '__main__': cli()","title":"kafkautil-ecs code"}]}